// Generated by CoffeeScript 2.0.2
var CES, GameContext, TextRenderer, clear;

clear = require('clear');

CES = require('ces');

TextRenderer = require('./render.coffee');

require('keypress')(process.stdin);

module.exports = GameContext = class GameContext {
    constructor(entities = []) {
        var i, len, system, systems;
        this.spawn = this.spawn.bind(this);
        this.tick = this.tick.bind(this);
        this.entities = entities;
        this.world = new CES.World();
        this.renderer = new TextRenderer();
        systems = [
            this.inputSystem = CES.System.extend({
                addedToWorld: function(world) {
                    return process.stdin.on('keypress',
                        function(key,
                            char) {
                            return this.world.getEntities('input').foreach(function(ent) {
                                return ent.getComponent('input').keyPress(key,
                                    char);
                            });
                        });
                }
            }),
            this.drawSystem = CES.System.extend({
                addedToWorld: (world) => {
                    return world.renderer = this.renderer;
                },
                update: function(_) {
                    var renderer;
                    renderer = this.world.renderer;
                    this.world.getEntities('sprite',
                        'drawPos',
                        'drawMasked').foreach(function(ent) {
                        var pos;
                        return renderer.drawObject({
                            x: (pos = ent.getComponent('drawPos')).x,
                            y: pos.y,
                            sprite: {
                                data: ent.getComponent('sprite'),
                                masked: ent.getComponent('drawMasked')
                            }
                        });
                    });
                    clear();
                    return console.log(this.renderer.flush('\n'));
                }
            })
        ];
        for (i = 0, len = systems.length; i < len; i++) {
            system = systems[i];
            this.world.addSystem(system);
        }
    }

    spawn(entity) {
        return this.world.addEntity(entity);
    }

    tick(dt) {
        var time;
        time = Date.now();
        this.world.update((time - (this.last || time)) / 1000);
        return this.last = Date.now();
    }

};